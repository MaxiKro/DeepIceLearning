[Convolution3D]
	filters = 128
	kernel_size = (2,2,5)
		[kwargs]
		kernel_initializer = he_normal
		input_shape = (1,21,21,51)
		padding = same
		strides = 1

[BatchNormalization]

[Activation]
	activation = relu

[MaxPooling3D]
	[kwargs]
	pool_size = (2,2,2)
	padding = 'same'

[Convolution3D]
	filters = 128
	kernel_size = (2,2,5)
		[kwargs]
		kernel_initializer = he_normal
		padding = same
		strides = 1

[BatchNormalization]

[Activation]
	activation = relu

[MaxPooling3D]
	[kwargs]
	pool_size = (2,2,2)
	padding = 'same'

[Convolution3D]
	filters = 256
	kernel_size = (3,3,3)
		[kwargs]
		kernel_initializer = he_normal
		padding = same
		strides = 2

[BatchNormalization]

[Activation]
	activation = relu

[MaxPooling3D]
	[kwargs]
	pool_size = (2,2,2)
	padding = 'same'

[Convolution3D]
	filters = 256
	kernel_size = (3,3,3)
		[kwargs]
		kernel_initializer = he_normal
		padding = same
		strides = 2

[BatchNormalization]

[Activation]
	activation = relu

[MaxPooling3D]
	[kwargs]
	pool_size = (2,2,2)
	padding = 'same'

[Flatten]

[Dropout]
	rate = 0.5

[Dense]
	units = 2048
	[kwargs]
	kernel_initializer = normal
	activation = relu

[Dropout]
	rate = 0.5

[Dense]
	units = 1028
	[kwargs]
	kernel_initializer = normal
	activation = relu

[Dense]
	units = 1
	[kwargs]
	kernel_initializer = normal
	activation = linear

 # model.add(Convolution3D(8, (3,3,3), padding="same", kernel_initializer="he_normal"))
 # # model.add(BatchNormalization())
 # model.add(Activation('relu'))
 # model.add(MaxPooling3D((3, 3, 3), padding='same'))
