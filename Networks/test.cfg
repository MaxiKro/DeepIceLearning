*Settings*

[Inputs]
Branch1 = (x-np.mean(x))/np.std(x)
Branch2 = np.sum(x)

*Model*

{Branch1}

[Convolution3D]
filters = 64
kernel_size = (4,2,6)
[kwargs]
kernel_initializer = he_normal
padding = same
strides = (2,1,6)

[BatchNormalization]

[Activation]
activation = relu

[Dropout]
rate = 0.4

[Convolution3D]
filters = 32
kernel_size = (3,3,3)
[kwargs]
kernel_initializer = he_normal
padding = same
strides = 1

[BatchNormalization]

[Activation]
activation = relu

[MaxPooling3D]
[kwargs]
pool_size=(2, 2, 2)
padding='same'

[Flatten]

{Branch2}

[Dense]
units = 1
[kwargs]
kernel_initializer = normal
activation = relu

{model}

[Merge]
[kwargs]
layers = [Branch1, Branch2]

[Dense]
units = 1
[kwargs]
kernel_initializer = normal
activation = linear

